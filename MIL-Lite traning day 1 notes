MappAllocDefault(initFlag, ApplicationIdPtr, SystemIdPtr, DisplayIdPtr, DigIdPtr, ImageBuffIdPtr)

此宏释放使用MappAllocDefault（）宏分配的MIL应用程序默认值。注意，此功能不会影响系统显示屏上显示的内容;如果你想清除显示，你应该在调用MappFreeDefault()之前使用MdispDeselect（）

使用MILConfig工具去修改MIL的默认设置，default system， digitizer， display， and buffer
如果您经常使用相同的相机并且更喜欢使用MappAllocDefault（）来设置和初始化您的系统，您可能需要更新MILConfig文件以反映您的相机

安装后，如果指定了彩色摄像机，则使用MappAllocDefault（）分配的默认图像缓冲区将是三波段彩色图像缓冲区。但是，如果您没有指定彩色相机，但现在更喜欢使用彩色相机，则可能需要更新MILConfig以反映分配彩色相机和彩色图像缓冲区所需的默认值

MIL_ID  MilApplication,
        MilSystem,
        MilDisplay,
        MilDigitizer,
        MilImage;

/*init resourse*/        
MappAllocDefault(M_COMPLETE, &MilApplication, &MilSystem, &MilDisplay, &MilDigitizer, &MilImage);

/*grab continuously image data*/
MdiaGrabContinuous(MilDIagitizer, MilImage);

MosGetch(); // get enter key to stop grab

/*stop continuous grab*/
MdiaHalt(MilDiagitizer);

MosGetch();// get enter key to start single image

/*monoshot grab*/
MdigGrab(MilDigitizer, MilImage);

MosGetch();//get enter key to free default resource

/*free default resource*/
MappFreeDefault(MilApplication,	MilSystem, 	MilDisplay, MilDigitizer, MilImage);


                        Installing MIL
在安装过程中，系统会询问您一些问题，例如：
•要安装程序的驱动器和目录。
•在64位OS（32位或64位或两者）的情况下安装MIL的平台。
•计算机中安装的Matrox硬件类型（例如，Matrox Morphis）。
•是否安装MGA驱动程序。只会询问您是否有带显示部分或Matrox图形卡的Matrox成像板，并且要安装的驱动程序比计算机上已有的驱动程序更新。
•使用MILConfig实用程序（稍后解释）中指定的默认配置时，默认情况下要加载的数字化仪和显示格式。如有必要，可在以后修改

如果您没有在安装时选择给定电路板的驱动程序，并且希望在系统中添加此类型的电路板，则必须卸载MIL并重新安装	
如果您不确定将来是否要添加新电路板，请选择所有电路板;如果您选择稍后添加电路板，这可确保所有驱动程序都存在


configure the display type
帧抓取器抓取数据的图像可以显示在Windows桌面上的窗口中（部分或扩展）。对于后一种情况，请注意某些电路板（如VIO）可能具有辅助显示器的特殊功能;有关详细信息，请参阅特定于板的MdispControl（）参考

non-paged memory size 
需要在此处指定为抓取缓冲区保留的线性非分页内存（DMA）的数量。保留的非分页内存量还会确定操作系统可用的剩余RAM量.
您可以为任何板选择的最小线性非分页内存量为1 MB

测试安装结果
您可以编译并运行我们的示例程序mappstart.exe，在\ Users \ Public \ Documents \ Matrox Imaging \ Mil \ Examples \ mappstart目录中，以测试安装。请注意，MIL提供了所有示例的编译版本

MIL Control Center
通过MIL Control Center，您可以访问所有MIL示例和工具

Matrox intellicam


Creating a new MIL project in C++
•要编译MIL应用程序，除了必需的标准C包含文件外，还必须包含mil.h头文件。编译完应用程序后，必须将其与适用于操作系统，编译器和目标板的库或导入库相链接。 MIL库位于\ Matrox Imaging \ Mil \ LIB目录中。
•强烈建议您熟悉MIL的众多示例;通常情况下，当使用适当的示例作为起点时，看似复杂的应用程序会变得简化

                        MIL Portability
MIL data types : portable and os independent.

MIL_INT 
    指定一个整数值
    补充传统的int和long数据类型
    数据深度在32位操作系统上为32位，在64位操作系统上为64位
MIL_UINT
    指定一个无符号整数的值
    数据深度与MIL_INT相同 
MIL_DOUBLE
    指定一个双精度浮点数据类型
    
包含的数据类型有 signed, unsigned, and fixed-length versions of MIL_INT, MIL_UINT, MUL_DOUBLE 数据类型

fixed-length data types
MIL_INT8, MIL_INT16, MIL_INT32, MIL_INT64
MIL_UINT8, ...


MIL_TEXT_CHAR
    字符串数组
    替换 char 数据类型
MIL_TEXT_PTR
    指向字符串数组的指针
    替换 char*
MIL_CONST_TEXT_PTR
    指向字符串常量数组的指针
    代替 const char*
MIL_TEXT_CHAR, MIL_TEXT_PTR, and MIL_CONST_TEXT_PTR
    在应用程序以ASCII获unicode编译都能使用
    提供两个编译器选项之间的可移植性
    
MIL_ID 
    只有可用于声明MIL标识符的选项
    用于标识资源（缓冲区，系统和上下文）
example:
MIL_ID  Milapplication,
        MilSystem,
        MilDisplay,
        MilImage;
MappAllocDefault(M_DEFAULT, &MilApplication, &MilSystem,
                    &MilDisplay, &M_NULL, &MilImage);
                    
                    
                    
                    MIL Porability  
ASCII/Unicode

UTF-16
    16位Unicode转换格式
    可变宽度字符编码
    整个Unicode字符库可编码为16位单词序列
    windows默认的编码格式
    在编译为Unicode客户机时MIL采用的编码格式
UTF-8
    8位Unicode转换格式
    可变宽度的字符编码
    与ASCII兼容的字节码和字符分配的初始编码
    每个字符编码为1～4个字节
        1字节用于表示128个US-ASCII字符
        其他字节数用于表示其他字符集
    如果应用在使用Unicode编码的客户机上编译，MIL将使用该编码格式
    Linux默认的编码格式
    windows不完全支持的编码格式
UTF & Windows behavier
    许多windows程序在文件开始时添加字节序列EF BB BF，以表明文件是使用UTF-8编码的
    当UTF-8被解释为UTF-16时，常常会导致错误
MIL支持Unicode编码
在编译应用是可以选择ASCII或者Unicode编码
MIL_TEXT
    macro用适当的编码（ASCII或Unicode）转换所提供的字符串
    MIL_TEXT不能与char*和run-time字符串一起使用
    只适用与静态变量或纯文本
语法：
    MIL_TEXT("Text to be converted");
例：
    MdispAlloc(MilSystem, M_DEFAULT, MIL_TEXT("M_NTSC"), M_AUXILIARY, &MilDisplay1);

    MdispAlloc(MilSystem, M_DEFAULT, MIL_TEXT(""\u3088\u3046\u3053/u305d""), ...);

portability function 可移植函数
c/c++           portability Mil version             description

abs()           MIL_INT MosAbs(MIL_INT n)           计算绝对值
getch()         MIL_INT MosGetch()                  从控制台输入接收一个字符
getchar()       MIL_INT MosGetchar()                从标准输入流读取一个字符
kbhit()         MIL_INT MosKbhit()                  检查控制台是否有键盘输入
main()          MIL_INT MosMain()                   主程序入口函数
printf()        MIL_INT MosPrintf(MIL_TEXT_PTR format, ...)     格式化字符串输出到控制台
sleep()         MIL_INT MosSleep(MIL_INT waitTime)   线程进入睡眠状态
sprintf()       MIL_INT MosSprintf(MIL_TEXT_PTR buffer,         格式化字符串输入到buffer
                    MIL_INT size, MIL_TEXT_PTR format, ...)
strcat()        MIL_INT MosStrcat(MIL_TEXT_PTR strDestination,  合并字符串
                    MIL_INT size, MIL_TEXT_PTR strSource)
strcmp()        MIL_INT MosStrcmp(MIL_TEXT_PTR string1,         比较字符串
                    MIL_TEXT_PTR string2)
strcpy()        MIL_INT MosStrcpy(MIL_TEXT_PTR strDestination,  复制字符串到另一个字符串
                    MIL_INT size, MIL_TEXT_PTR strSource)
strlen()        MIL_INT MosStrlen(MIL_TEXT_PTR str)             获取字符串的长度
strlwr()        MIL_INT MosStrlwr(MIL_TEXT_PTR str)             转换字符串为小写字符
strupr()        MIL_INT MosStrupr(MIL_TEXT_PTR str)             转换字符串为大写字符


Data Type       32-bits OS                  64-bits OS

int             32-bit                      32-bit
long            32-bit                      64-bit(linux), 32-bit(windows)
double          64-bit                      64-bit
MIL_INT         32-bit                      64-bit
MIL_DOUBLE      64-bit                      64-bit
PTR             32-bit                      64-bit

Void Pointers

某些函数的最后一个参数类型是任意类型的指针(void-pointer)
    M...Inquire() and M...GetResult()
数据类型取决于
    1.函数中某一个参数的设置
        MbufInquire(bufId, M_ALLOCATION_OVERSCAN_SIZE, %Value1) // value1 type is MIL_INT
        MbufInquire(bufId, M_ANCESTOR_ID, &value2) // value2 type is MIL_ID
    2.对函数参数集合的添加
        MbufInquire(bufId, M_DRAW_RELATIVE_ORIGIN_X + M_TYPE_DOUBLE, &value4) // value4 type is MIL_INT
        MbufInquire(bufId, MDRAW_RELATIVE_ORIGIN_X, &value3) // value3 type is MIL_DOUBLE


                            Safe Types

1.在MIL API中大多数Inquire函数最后一个参数类型为void*
2.然后，MIL将函数的返回值放在这个指针（void*）指向的地址上，而不管返回值的类型如何
3.错误的数据类型将导致报错
    stack corruption
    array overflow
    unitialized returned data
    segmentation faults
Safe types
1.帮助程序避免错误的指针数据类型转换
2.在32-bit OS移植到64-bit OS时能自动转化对应的数据长度，不管是在ASCII or Unicode
3.只在windows下可以使用

In Debug Mode
    编译期间默认启用安全数据类型
In Release mode
    编译期间默认关闭安全数据类型

如果期望的数据类型和实际函数返回的数据类型不一致，会报警告错误
警告错误不能向error一样被捕获

略过类型检查的原因：
1.数据类型在函数调用是无法预知，这种情况发生在一个函数包装在另一个函数中
    MIL_INT UserWrapperAroundMbufInquire(MIL_ID bufId, MIL_INT INquireTYpe, void* useptr)
    {
        return MbufInquire(bufId, inquireType, usePtr);
    }
2.传递给函数的值的数据类型不是函数所接受的预期的数据类型之一（例如， 在应用程序中定义了自定义的数据类型）
    关闭安全类型检查
    在#include "mil.h"之前添加#define M_MIL_USE_SAFE_TYPE = 0;

                            Buffers

主要内容包含
1.缓冲区属性和类型
2.维度，数据深度和数据类型
3.操作数据缓冲区
4.加载和保存图像
5.将数据生成到LUTs中

分配数据缓冲区时必须指定
1.属性
2.目标系统
3.数据维度
4.数据类型和深度

分配不同类型的缓冲区

MbufAlloc1d()   分配1维的数据缓冲区
MbufAlloc2d()   2维度
MbufAllocColor() 颜色数据类型

return :buffer identifier, or M_NULL if allocation fails

MbufAlloc1d(MIL_ID systemId,  //system identifier
            MIL_INT sizex,    //x dimension
            MIL_INT type,     //data depth and data type
            MIL_INT64 attribute,//buffer attribute
            MIL_ID *bufferPtr)  //storage location for buffer identifier

sample: allocate buffer to be used for an 8-bit grayscale lookup table
    MbufAlloc1d(MilSystem, 256, 8, M_LUT, &MilLutBuffer);

MbufAlloc2d(SystemId,
            sizex,      //x dimension
            sizey,      //y dimension
            type,
            attribute,
            bufferPtr)

sample: allocate an 8-bit image buffer for grabbing and displaying
    MbufAlloc2d(MilSystem, 100, 100, 8, M_IMAGE + M_GRAB + M_DISP, &MilBuffer);


MbufAllocColor(SystemId,
                sizeBand,       // number of color bands
                sizex,
                sizey,
                type,
                attribute,
                bufIdPtr)

sample: allocate a packed RGB displayable directX buffer in the video memory
    MbufAllocColor(MilSystem, 3, 1024, 768, 8,
                M_IMAGE+M_DIRECTX+M_RGB24+M_PACKED+M_VIDEO_MEMORY+M_DISP,
                &MilDxBuffer);

属性和缓冲区类型
                 image data   : M_IMAGE
MIL / MIL-Lite : lookup table : M_LUT
                 array of data: M_ARRAY


                 Convolution kernel : M_KERNEL          //卷积核
MIL ONLY       :
                 Structuring element: M_STRUCT_ELEMENT  //结构化元素

MIL 缓冲区属性指定缓冲区类型及其预期用途，使用这些信息确定在物理内存中最合适的分配位置，以及如何处理缓冲区

与M_IMAGE组合的多个属性说明
    M_DISP      用于显示display
    M_GRAB      存储采集的数据，grab data
    M_PROC      可被处理的缓冲区
    M_COMPRESS  可以容纳压缩数据的图像缓冲区

在分配图像缓冲区(M_IMAGE)时必须提供更多信息，通过M_IMAGE与上述属性组合使用
使用M_COMPRESS类型必须添加组合常数指定压缩数据格式（如：M_H264）

for example, allocate an image buffer
    M_IMAGE + M_GRAB + M_DISP + M_PROC

必须给出buffer的属性才能做对应的操作，如M_DISP，buffer没有设置该属性使用MdispSelect()将会报错

设置了M_GRAB属性的buffer分配在线性未分页的内存空间(linear non-paged memory)
    grabbing 是一个实时的操作，因此需要不断的访问物理上连续的内存
    未分页的内存是物理连续且总是存在的

总线控制在设备不需要cpu的帮助的情况下写入非分页内存

内存限制
    M_GRAB缓冲区最大值受非分页内存限制
    M_GRAB和M_PROC缓冲区的最大值受板载内存的限制

如果非分页内存不足以分配一个grab buffer，MbufAlloc...()将报错
必须使用MILConfig设置非分页内存数量，才能分配到非分页内存


                            LUT data buffer

LUT data buffer (M_LUT)

LUTs 将数据映射到预先计算的替换值

LUT index           LUT values
0                   0
1                   84
2                   170
3                   255

原始8-bit图像存储的不是grayscale数据，而是LUT index，
再通过LUT map的到result 8-bit图像实际的灰度值（LUT values）
当不再需要LUT buffer是通过MbufFree()释放内存


Dimensions

buffer can have:
    X  //width
    Y  //height
    number of color bands // RGB or gray ..., typically 1 or 3
LUTs of dimensions Y = 1
color buffers each band has the same data depth and type

Data Depth
数据深度表示缓冲区每个频带的数据比特数，（1-bit, 8-bit, 32-bit）

如果一个图像的数据深度为1位，每个像素将被表示为1位，8个像素将被打包成一个字节
注意，直接在已打包的二进制缓冲区上进行处理非常快速和高效。许多MIL函数在打包的二进制缓冲区上执行时支持加速处理。
不支持直接打包二进制缓冲区的一般处理函数，自动将数据复制到合适数据类型的临时缓冲区，执行操作，并将结果缓冲区返回到打包二进制缓冲区。

Data Type

1-bit二进制数
8,16,32-bit 整数（有符号或无符号）
32-bit浮点数

缓冲区的数据类型指示其数据如何在内部表示，即，有符号或无符号或浮点

通常MIL函数能处理
    任意数据类型和深度的缓冲区
    不同数据类型和深度的源缓冲区和目标缓冲区
如果某个函数只能操作指定类型的数据缓冲区，则会在函数描述中明确说明

通常8位（1或3波段）缓冲区用于显示，因此任何其他缓冲区在现实之前都要转化为8-bit


Choosing the right buffer

当你需要整数的缓冲区，使用
8-bit per pixel
16-bit
32-bit if you need
    浮点型数据 (float)
    额外的精度
    更大的动态范围

1-bit buffer处理更高效
    点对点的逻辑操作， AND / OR / XOR
    形态学操作
    Blob operations



操作和控制数据缓冲区


操作和控制数据缓冲区的特定部分通过：
    在其中创建一个child缓冲区
    拷贝这部分到其他缓冲区

child buffers 等同于region of interest(ROI)
通常只能处理一个缓冲区，但是对于child buffer可以同时处理多个

使用MbufChild()分配和关联child buffer独特的标识符
任何指定的或返回的坐标都与子对象的左上角相关，即，相对坐标偏移量
child buffer也能有自己的child buffers

child buffer properties
不能超出parent范围
可以resize和moving using MbufChildMove()
释放 using MbufFree()
    child buffer 在parent 分配后分配，在parent释放前释放

MbufChild1d() 1-dim region all bands
MbufChild2d() 2-dim region all bands

MbufChildColor()  1-band
MbufChildColor2d() 1- or all-bands


MIL functions description

1-D child buffers

MbufChild1d(parentBufId,        //parent buffer identifier
            OffX,               //x pixel offset relative to parent buffer, 50
            sizeX,              //child buffer width , 100
            buffIdPtr)          //storage location for child buffer identifier

return value : child buffer identifier or M_NULL

2-D child buffers

MbufChild2d(parentBufId,        //...
            OffX,               //...
            OffY,               //y pixel offset relative to parent
            sizeX,
            sizeY,
            bufIdPtr)

all region and all bands of parent buffer range
MbufChildColor(parentBufId,
                Band,           //index of the color band
                BufIdPtr)

sample: create a child buffer to edit only the green band of a parent buffer
    MbufChildColor(parentBuffer, M_GREEN, &childBuffer)

parent buffer 不能有 M_COMPRESS 属性


MbufChildColor2d(parentBufId,
                 Band,          //M_GREEN
                 OffX,
                 OffY,
                 SizeX,
                 SizeY,
                 bufIdPtr)

parent buffer cannot have an M_COMPRESS attribute,unless band parameter is set to M_ALL_BAND


Copying specific buffer areas

operate on
    areas
    bits

if not the same type, MIL compensates(补偿)
作为操作子缓冲区的替代方法，对buffer的特定区域或位拷贝到另一个buffer

MIL buffer copy functions
    MbufCopy()
    MbufCopyColor()
    MbufCopyColor2d()
    MbufCopyClip()
    MbufCopyCond()
    MbufCopyMask()
    MbufTransfer()


如果源缓冲区深度大于目标深度，那么在将数据复制到目标时，最重要的位就会被截断。如果目标深度大于源深度，
那么在复制到目标时，源数据为零或扩展了符号(取决于源的类型)。如果目标比源更大，则超过缓冲区的区域不受影响。

当从浮点缓冲区复制到整数缓冲区时，值将被截断。当从非二进制缓冲区复制到二进制缓冲区，
源缓冲区中的所有非零像素都表示为二进制缓冲区中的1(1)。当将二进制缓冲区复制到不同深度的缓冲区时，
每个位都被复制到不同目标像素的最低有效位。目标像素的剩余位设为0;要将位值转到所有位，
请使用mimbinalize () (MIL-Full)。

如果源缓冲区是3波段YUV缓冲区，而目标缓冲区是1波段缓冲区，则只复制Y波段(亮度)。
如果源缓冲区是3波段RGB缓冲区，而目标缓冲区是1波段缓冲区，则只复制红色波段。




                                缓冲区压缩和颜色空间转换

when copying from following type , MIL automatically converts

    RGB to/from YUV
    M_COMPRESS to/from uncompressed     //如果源缓冲区有M_COMPRESS说明符，而目标缓冲区没有，则数据将自动解压缩。
    uncompressed to/from M_COMPRESS     //如果目标缓冲区有M_COMPRESS说明符，而源缓冲区没有，数据将被自动压缩。
    M_COMPRESS to/from M_COMPRESS (diff type) //如果两个缓冲区都有M_COMPRESS说明符，但是不同的压缩类型，数据将根据目标缓冲区中的设置重新压缩




